FLUXOGRAMA DFS
    A1[Início] --> B1[Cria visited[V]=false]
    B1 --> C1[Cria Max-Heap; Push(start,0)]
    C1 --> D1{Heap vazio?}
    D1 -- Não --> E1[Pop → it]
    E1 --> F1{visited[it.vertex]?}
    F1 -- Sim --> D1
    F1 -- Não --> G1[visited[it.vertex]=true]
    G1 --> H1[Registrar it.vertex em dfs_seq]
    H1 --> I1[Percorre adjList[it.vertex]]
    I1 --> J1{visited[adj.dest]?}
    J1 -- Não --> K1[Push(adj.dest, adj.weight)]
    J1 -- Sim --> I1
    K1 --> D1
    D1 -- Sim --> L1[Fim]

FLUXOGRAMA BFS
    A2[Início] --> B2[Cria visited[V]=false]
    B2 --> C2[Cria Min-Heap; Push(start,0)]
    C2 --> D2{Heap vazio?}
    D2 -- Não --> E2[Pop → it]
    E2 --> F2{visited[it.vertex]?}
    F2 -- Sim --> D2
    F2 -- Não --> G2[visited[it.vertex]=true]
    G2 --> H2[Registrar it.vertex em bfs_seq]
    H2 --> I2[Percorre adjList[it.vertex]]
    I2 --> J2{visited[adj.dest]?}
    J2 -- Não --> K2[Push(adj.dest, adj.weight)]
    J2 -- Sim --> I2
    K2 --> D2
    D2 -- Sim --> L2[Fim]

FLUXOGRAMA FUNÇÃO DE COMPARAÇÃO
    A3[Início] --> B3[Obter V = graph->V]
    B3 --> C3[Aloca dfs_seq[V], bfs_seq[V]]
    C3 --> D3[Chama dfs_priority_record → preenche dfs_seq, dfs_count]
    D3 --> E3[Chama bfs_priority_record → preenche bfs_seq, bfs_count]
    E3 --> F3[Aloca pos_dfs[V], pos_bfs[V]]
    F3 --> G3[Para i de 0 a V-1:]
    G3 --> H3[pos_dfs[ dfs_seq[i] ] = i; pos_bfs[ bfs_seq[i] ] = i]
    H3 --> I3[Fim do loop]
    I3 --> J3[Imprime cabeçalho da tabela]
    J3 --> K3[Para v de 0 a V-1: printf(v, pos_dfs[v], pos_bfs[v])]
    K3 --> L3[Libera vetores]
    L3 --> M3[Fim]
